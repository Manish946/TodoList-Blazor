@page "/"

@using Microsoft.AspNetCore.Identity
@using TodoList_Blazor.Components.Account
@using TodoList_Blazor.Data
@using TodoList_Blazor.Domain
@using TodoList_Blazor.Services
@using Microsoft.AspNetCore.Authorization

@* Inject RoleHandler *@
@inject RoleHandler _roleHandler;
@inject IServiceProvider _serviceProvider;
@inject AuthenticationStateProvider GetAuthenticationStateAsync;
@inject ICprService _cprService;
@inject UserManager<ApplicationUser> _userManager;
@inject IUserService _userService;
@inject ICprService _cprService;
@inject ITodoListService _todoListService;

@attribute [Authorize]
@attribute [Authorize(Policy = "AuthenticatedUser")]
@* @attribute [Authorize(Roles = "Admin")] *@
<PageTitle>Home</PageTitle>

@* <AuthorizeView role="Admin">

	<Authorized>
		<h1>Hello, Admin!</h1>

		Welcome to your new app.
	</Authorized>

	<NotAuthorized>
		<h1>Not Authorized</h1>
	</NotAuthorized>

</AuthorizeView> *@

<h1>User: @username </h1>

<div>
	@if (cprEnterned == false)
	{
		<Card Style="width:29rem;">
			<CardBody>
				<label class="form-label">ENTER YOUR CPR NUMBER</label>
				<NumberInput TValue="long" @bind-Value="cprInput" Placeholder="TodoList" />
				@* <input @bind-value="cprInput" Placeholder="TodoList"  /> *@
				<Button Style="margin-top:10px" @onclick="registerCPR" Color="ButtonColor.Primary"> Sumbit </Button>
				<p>@errorMessage</p>
			</CardBody>
		</Card>
	}
	else
	{
		<Card Style="width:42rem;">
			<CardBody>
				<div class="form-group row mb-3">
					<div class="col-md-9">
					<InputText class="form-control" @bind-Value="todoItemInput" DisplayName="TodoList"></InputText>
					</div>
					<Button class="col-md-3" @onclick="addTodoItem" Color="ButtonColor.Primary"> Add TodoList </Button>

				</div>
				<Card Style="width:40rem;" >
					<CardHeader Color="CardColor.Dark" >
						TO DO LISTS
					</CardHeader>
					<CardBody>
						@if(todoLists.Count != 0)
						{
							@foreach (var todo in todoLists)
							{
								<Card Color="CardColor.Light" Class="mb-4">
									<CardBody>
										<CardTitle>@todo.Item</CardTitle>
									</CardBody>
									<CardFooter>
										<Button @onclick="(args) => deleteTodoItem(args, todo)" Color="ButtonColor.Danger"> Delete </Button>

									</CardFooter>
								</Card>
							}
						} else
						{
							<CardText>TO DO LIST IS EMPTY</CardText>
						}

					</CardBody>
				</Card>
			</CardBody>
		</Card>
	}

</div>



@code {
	// protected override async Task OnInitializedAsync()
	// {
	// 	await _roleHandler.CreateUserRole("local@gmail.com", "admin", _serviceProvider);
	// }

	private string? username;
	private string? errorMessage;
	private List<TodoList> todoLists;
	private long cprInput;
	private string todoItemInput = "";
	private bool cprEnterned = false;
	private User currentUser = new User();
	protected override async Task OnInitializedAsync()
	{
		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		username = user.Identity.Name;
		currentUser = _userService.getUserByUserName(username);
		fetchTodoList(currentUser.Id);
	}

	public void registerCPR()
	{
		string cpr = cprInput.ToString();
		var userCpr = _cprService.getCpr(currentUser);
		if (userCpr != null)
		{
			if (BCrypt.Net.BCrypt.EnhancedVerify(cpr, userCpr.CprNr, BCrypt.Net.HashType.SHA256))
			{
				cprEnterned = true;
			}
			else
			{
				cprEnterned = false;
				errorMessage = "Wrong Cpr Input!";
			}
		}
		else
		{
			
			var hashedCpr = BCrypt.Net.BCrypt.EnhancedHashPassword(cpr, BCrypt.Net.HashType.SHA256);
			_cprService.createCpr(hashedCpr, currentUser);
			cprEnterned = true;
		}
	}

	private void fetchTodoList(int userId)
	{
		todoLists = _todoListService.getUserTodoLists(userId);
	}

	private void addTodoItem()
	{
		if (todoItemInput != "")
		{
			var todoItem = new TodoList();
			todoItem.Item = todoItemInput;
			todoItem.UserID = currentUser.Id;
			todoLists.Add(todoItem);
			_todoListService.createTodoList(todoItem);
			todoItemInput = "";
		}
	}

	public void deleteTodoItem(EventArgs e, TodoList todolist)
	{
		todoLists.Remove(todolist);
		_todoListService.deleteTodoList(todolist);
	}
}