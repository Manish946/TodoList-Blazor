@page "/"

@using Microsoft.AspNetCore.Identity
@using TodoList_Blazor.Components.Account
@using TodoList_Blazor.Data
@using TodoList_Blazor.Domain
@using TodoList_Blazor.Services
@using Microsoft.AspNetCore.Authorization

@* Inject RoleHandler *@
@inject AuthenticationStateProvider GetAuthenticationStateAsync;
@inject ICprService _cprService;
@inject UserManager<ApplicationUser> _userManager;
@inject IUserService _userService;
@inject ICprService _cprService;
@inject ITodoListService _todoListService;
@inject RoleHandler _roleHandler;
@inject IServiceProvider _serviceProvider;

@attribute [Authorize]
@attribute [Authorize(Policy = "AuthenticatedUser")]
@* @attribute [Authorize(Roles = "Admin")] *@
<PageTitle>Home</PageTitle>

<div>
    <h1>User: @username </h1>
    @if (isAdmin)
    {
        <h1>Admin</h1>
    }
    else
    {
        <h1>Member</h1>
    }

    <div>
        @if (cprEnterned == false)
        {
            <Card Style="width:29rem;">
                <CardBody>
                    <label class="form-label">ENTER YOUR CPR NUMBER</label>
                    <NumberInput TValue="long?" @bind-Value="cprInput" Placeholder="CPR NUMBER" />
                    <Button Style="margin-top:10px" @onclick="registerCPR" Color="ButtonColor.Primary"> Sumbit </Button>
                    <p style="margin-top:10px; color:red">@errorMessage</p>
                </CardBody>
            </Card>
        }
        else
        {
            <Card Style="width:42rem;">
                <CardBody>
                    <div class="form-group row mb-3">
                        <div class="col-md-9">
                            <InputText class="form-control" @bind-Value="todoItemInput" @onkeyup="addTodoItem" DisplayName=" TO DO LIST ITEM"></InputText>
                        </div>
                        <Button class="col-md-3" @onclick="addTodoItem" Color="ButtonColor.Primary"> Add TodoList </Button>

                    </div>
                    <Card Style="width:40rem;">
                        <CardHeader Color="CardColor.Dark">
                            TO DO LISTS
                        </CardHeader>
                        <CardBody>
                            @if (todoLists.Count != 0)
                            {
                                @foreach (var todo in todoLists)
                                {
                                    <Card Color="CardColor.Light" Class="mb-4">
                                        @if (editIndex == todoLists.IndexOf(todo))
                                        {
                                            <CardBody>
                                                <InputText @bind-Value="todo.Item" DisplayName="TodoList" class="form-control"></InputText>
                                            </CardBody>
                                            <CardFooter>
                                                <Button @onclick="(args) => deleteTodoItem(todo)" Color="ButtonColor.Danger"> Delete </Button>
                                                <Button @onclick="(args) => updateTodoItem(todo)" Color="ButtonColor.Info"> Save </Button>

                                                @if (!todo.IsCompleted)
                                                {
                                                    <Button @onclick="(args) => toggleTodoItemCompeleted(todo)" Color="ButtonColor.Warning">Complete</Button>
                                                }
                                                else
                                                {
                                                    <Button @onclick="(args) => toggleTodoItemCompeleted(todo)" Color="ButtonColor.Success">Completed</Button>
                                                }
                                            </CardFooter>
                                        }
                                        else
                                        {
                                            <CardBody>
                                                @if (todo.IsCompleted)
                                                {
                                                    <CardTitle><s>@todo.Item</s> </CardTitle>
                                                }
                                                else
                                                {
                                                    <CardTitle>@todo.Item</CardTitle>
                                                }
                                            </CardBody>
                                            <CardFooter>
                                                <Button @onclick="(args) => deleteTodoItem(todo)" Color="ButtonColor.Danger"> Delete </Button>
                                                <Button @onclick="(args) => enableEdit(todoLists.IndexOf(todo))" Color="ButtonColor.Info"> Edit </Button>

                                                @if (!todo.IsCompleted)
                                                {
                                                    <Button @onclick="(args) => toggleTodoItemCompeleted(todo)" Color="ButtonColor.Warning">Complete</Button>
                                                }
                                                else
                                                {
                                                    <Button @onclick="(args) => toggleTodoItemCompeleted(todo)" Color="ButtonColor.Success">Completed</Button>
                                                }
                                            </CardFooter>
                                        }
                                    </Card>
                                }
                            }
                            else
                            {
                                <CardText>TO DO LIST IS EMPTY</CardText>
                            }

                        </CardBody>
                    </Card>
                </CardBody>
            </Card>

            @if (isAdmin)
            {
                <Button Style="margin-top:10px" @onclick="clearAll" Color="ButtonColor.Danger">Clear All To do List</Button>
            }
        }
    </div>
</div>


@code {

    private string? username;
    private string? errorMessage;
    private List<TodoList> todoLists;
    private long? cprInput = null;
    private string todoItemInput = "";
    private bool cprEnterned = false;
    private User currentUser = new User();
    private int editIndex = -1;
    private bool isAdmin = false;
    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        isAdmin = user.IsInRole("admin");
        username = user.Identity.Name;
        currentUser = _userService.getUserByUserName(username);
        fetchTodoList(currentUser.Id);
    }

    public void registerCPR()
    {
        string cpr = cprInput.ToString();
        var userCpr = _cprService.getCpr(currentUser);
        if (userCpr != null)
        {
            if (BCrypt.Net.BCrypt.EnhancedVerify(cpr, userCpr.CprNr, BCrypt.Net.HashType.SHA256))
            {
                cprEnterned = true;
            }
            else
            {
                cprEnterned = false;
                errorMessage = "Wrong Cpr Input!";
            }
        }
        else
        {
            var hashedCpr = BCrypt.Net.BCrypt.EnhancedHashPassword(cpr, BCrypt.Net.HashType.SHA256);
            _cprService.createCpr(hashedCpr, currentUser);
            cprEnterned = true;
        }
    }

    private void fetchTodoList(int userId)
    {
        todoLists = _todoListService.getUserTodoLists(userId);
    }

    private void addTodoItem()
    {
        if (todoItemInput != "")
        {
            var todoItem = new TodoList();
            todoItem.Item = todoItemInput;
            todoItem.UserID = currentUser.Id;
            todoLists.Add(todoItem);
            _todoListService.createTodoList(todoItem);
            todoItemInput = "";
        }
    }

    private void deleteTodoItem(TodoList todolist)
    {
        todoLists.Remove(todolist);
        _todoListService.deleteTodoList(todolist);
    }

    private void updateTodoItem(TodoList todolist)
    {
        _todoListService.updateTodoList(todolist);
        editIndex = -1;
    }

    private void enableEdit(int index)
    {
        editIndex = index;
    }

    private void toggleTodoItemCompeleted(TodoList todolist)
    {
        if (todolist.IsCompleted)
        {
            todolist.IsCompleted = false;
        }
        else
        {
            todolist.IsCompleted = true;
        }
        _todoListService.updateTodoList(todolist);
    }

    private void clearAll()
    {
        todoLists.Clear();
        _todoListService.clearAllTodoList();
    }
}