@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Globalization
@using System.Text.Encodings.Web
@using System.Drawing
@using QRCoder
@using TodoList_Blazor.Components.Account.Pages.Manage
@using TodoList_Blazor.Data
@using System.ComponentModel.DataAnnotations


@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<h1>Confirm email</h1>
<StatusMessage Message="@statusMessage" />
<div>
	<img src="@qrImageSource" />
</div>

@code {
	private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";
	private string? statusMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromQuery]
	private string? UserId { get; set; }

	[SupplyParameterFromQuery]
	private string? Code { get; set; }

	private string qrImageSource = "";

	protected override async Task OnInitializedAsync()
	{
		if (UserId is null || Code is null)
		{
			RedirectManager.RedirectTo("");
		}

		var user = await UserManager.FindByIdAsync(UserId);
		if (user is null)
		{
			HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
			statusMessage = $"Error loading user with ID {UserId}";
		}
		else
		{
			var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
			var result = await UserManager.ConfirmEmailAsync(user, code);
			statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
			await LoadSharedKeyAndQrCodeUriAsync(user);
		}

	}

	private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
	{
		// Load the authenticator key & QR code URI to display on the form
		var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
		if (string.IsNullOrEmpty(unformattedKey))
		{
			await UserManager.ResetAuthenticatorKeyAsync(user);
			unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
		}

		var sharedKey = FormatKey(unformattedKey!);

		var email = await UserManager.GetEmailAsync(user);
		var authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
		GenerateQrImage(authenticatorUri);

	}

	void GenerateQrImage(string uri)
	{
		QRCodeGenerator qrGenerator = new QRCodeGenerator();
		QRCodeData qrCodeData = qrGenerator.CreateQrCode(uri, QRCodeGenerator.ECCLevel.Q);
		QRCode qrCode = new QRCode(qrCodeData);
		// Convert the image to base64 string
		using MemoryStream ms = new();
		using System.Drawing.Bitmap qrBitMap = qrCode.GetGraphic(20);
		qrBitMap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
		string base64 = Convert.ToBase64String(ms.ToArray());
		qrImageSource = string.Format("data:image/png;base64,{0}", base64);
	}
	private string FormatKey(string unformattedKey)
	{
		var result = new StringBuilder();
		int currentPosition = 0;
		while (currentPosition + 4 < unformattedKey.Length)
		{
			result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
			currentPosition += 4;
		}
		if (currentPosition < unformattedKey.Length)
		{
			result.Append(unformattedKey.AsSpan(currentPosition));
		}

		return result.ToString().ToLowerInvariant();
	}

	private string GenerateQrCodeUri(string email, string unformattedKey)
	{
		return string.Format(
			CultureInfo.InvariantCulture,
			AuthenticatorUriFormat,
			UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
			UrlEncoder.Encode(email),
			unformattedKey);
	}

}
